" Modeline and Notes {
" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
"
" Forked spf13-vim of perfectworks.
" }

" Environment {
    " Basic {
        set clipboard&
    " }
" }

" General {
    set fileencodings=ucs-bom,utf-8,gbk
    set fileformats=unix,dos,mac
    set tags+=tags;
    set ambiwidth=double
    set laststatus=2
    set autowriteall
    set nospell
    set wildignore+=*-target,target
" }

" Vim UI {
    colo molokai
    set scrolljump=0
    set scrolloff=0
" }

" Formatting {
    autocmd FileType css,less,vm,vim autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
" }

" Key (re)Mappings {
    " Unmap spf13 mappings {
        cunmap cwd

        vunmap <
        vunmap >
    " }

    " Paste yank register {
        nmap gp "0p
        nmap gP "0P
    " }

    " Start shell
    map <Leader>sh :sh<CR>

    " Emacs style command line course move {
        cmap <C-A> <Home>
        cmap <C-E> <End>
    " }

    " map double j to <esc>, double <esc> to avoid NeoComplCache <esc> bug.
    imap <silent> jj <esc><esc>:w<cr>

    " F7/F8 to jump to next/prev diff / location-list {
    " @see http://vim.wikia.com/wiki/Selecting_changes_in_diff_mode
        if &diff
            let g:origCursorPos=getpos('.')
            autocmd WinEnter * :call setpos('.', g:origCursorPos)
            autocmd WinLeave * :let g:origCursorPos=getpos('.')
            nmap <F7> [c
            nmap <F8> ]c
        else
            map <F7> :lprev<cr>
            map <F8> :lnext<cr>
        endif
    " }

    " Visual block search {
        function! VisualSearch(direction) range
            let l:saved_reg = @"
            execute "normal! vgvy"

            let l:pattern = escape(@", '\\/.*$^~[]')
            let l:pattern = substitute(l:pattern, "\n$", "", "")

            if a:direction == 'b'
                execute "normal ?" . l:pattern . ""
            elseif a:direction == 'f'
                execute "normal /" . l:pattern . ""
            endif

            let @/ = l:pattern
            let @" = l:saved_reg
        endfunction

        vnoremap <silent> * :call VisualSearch('f')<CR>
        vnoremap <silent> # :call VisualSearch('b')<CR>
    " }

    " Swap 0 and ^ {
        nnoremap 0 ^
        nnoremap ^ 0
        nnoremap d0 d^
        nnoremap d^ d0
        nnoremap c0 c^
        nnoremap c^ c0
        nnoremap s0 s^
        nnoremap s^ s0
        nnoremap y0 y^
        nnoremap y^ y0
    " }
" }

" Plugins {
    " SnipMate {
        " Setting the author var
        " If forking, please overwrite in your .vimrc.local file
        let g:snips_author = 'zhangyc <zhangyc@fenbi.com>'
    " }

    " CtrlP {
        nmap <silent> <C-j> :CtrlPTag<cr>
        nmap <silent> <space> :CtrlPMRUFiles<cr>

        let g:ctrlp_regexp = 1
        let g:ctrlp_cmd = 'CtrlPMixed'
        let g:ctrlp_max_files = 10000
    " }

    " Switch.vim {
        nnoremap - :Switch<cr>
    " }

    " NerdTree {
        unmap <leader>e
    " }

    " Ack {
        nmap <F3> :LAck <C-R><C-W>
    " }

    " NeoComplCache {
        function! ToggleSnipple()
            if &ft == 'snippet'
                w!
                edit #
                bdelete #
            else
                NeoComplCacheEditSnippets
            endif
        endfunction

        let g:neocomplcache_snippets_dir = neocomplcache_snippets_dir . ",~/.vim/bundle/fenbi-snippet/snippets"
        nmap <F9> :call ToggleSnipple()<CR>
    " }

    " ZenCoding {
        let g:user_zen_leader_key = '<c-l>'
    " }

    " BufExplorer {
        unmap <leader>b
    " }

    " Generate JavaScript tags {
        function! GenerateTag()
            let file = fnamemodify(findfile('jstags', '.;'), ':p')
            if executable(file)
                execute ':silent !' . file
            endif
        endfunction

        autocmd BufWritePost *.js call GenerateTag()
    " }

    " Sync edit file by bsync {
        autocmd BufWritePost * call system('bsync '.expand('%:p').' &')
    " }
" }

" Filetype {
    " Git Commit {
        au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
    " }
" }
